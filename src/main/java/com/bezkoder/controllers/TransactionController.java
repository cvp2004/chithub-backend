package com.bezkoder.controllers;

import com.bezkoder.models.Transaction;
import com.bezkoder.payload.response.MessageResponse;
import com.bezkoder.repository.TransactionRepository;
import com.bezkoder.security.jwt.JwtUtils;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@RestController
@RequestMapping("/api/transactions")
public class TransactionController {
     private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);
     public JwtUtils jwtUtils;
     public TransactionRepository transactionRepository;

     @GetMapping("/add")
     @PreAuthorize("hasRole('AGENT') or hasRole('MEMBER')")
     public ResponseEntity<?> createTransaction(@RequestBody @Valid Transaction transaction, @CookieValue(value = "token") String token) {
          try {

               String username = jwtUtils.getUserNameFromJwtToken(token);

               if(!username.equals(transaction.getSender()))
                    throw new Exception("Transaction Generated by Unauthorized User\n" + "Sender : " + transaction.getSender() + "\nCurrent User : " + username);

               Transaction newTransaction = transactionRepository.save(transaction);

               return ResponseEntity.ok(newTransaction);

          } catch (Exception e) {
               logger.error("Exception : " + e.getMessage());
               return ResponseEntity
                       .badRequest()
                       .body(new MessageResponse(e.getMessage()));
          }
     }

     @GetMapping("/{sender}/{receiver}")
     @PreAuthorize("hasRole('AGENT') or hasRole('MEMBER')")
     public ResponseEntity<?> getTransactionsBySenderAndReceiver(@PathVariable String sender, @PathVariable String receiver, @CookieValue(value="token") String token) {
          try {
               String username = jwtUtils.getUserNameFromJwtToken(token);

               if(!sender.equals(username) || !receiver.equals(username))
               {
                    throw new Exception("Access to Unauthorized Transaction Records !!" +
                            "\nRequested Sender : " + sender +
                            "\nRequested Reciever : " + receiver
                    );
               }

               List<Transaction> senderList = transactionRepository.findAllBySender(sender);
               List<Transaction> receiverList = transactionRepository.findAllByReceiver(receiver);

               List<Transaction> transactions = new ArrayList<>();

               for (Transaction t1 : senderList) {
                    if(receiverList.contains(t1))
                         transactions.add(t1);
               }

               if(transactions.isEmpty())
                    throw new Exception("Transactions not Found !!\n" + "Sender: " + sender + " Receiver: " + receiver);

               return ResponseEntity
                       .ok(transactions);

          } catch (Exception e) {
               logger.error("Exception : " + e.getMessage());
               return ResponseEntity
                       .badRequest()
                       .body(new MessageResponse(e.getMessage()));
          }
     }

     @GetMapping("/sender/{sender}")
     @PreAuthorize("hasRole('AGENT') or hasRole('MEMBER')")
     public ResponseEntity<?> getTransactionsBySender(@PathVariable String sender, @CookieValue(value = "token") String token) {
          try {

               String username = jwtUtils.getUserNameFromJwtToken(token);

               List<Transaction> transactions = transactionRepository.findAllBySender(sender);

               if(transactions == null)
                    throw new Exception("Transactions not Found !!");

               return ResponseEntity
                       .ok(transactions);
          } catch (Exception e) {
               logger.error("Exception : " + e.getMessage());
               return ResponseEntity
                       .badRequest()
                       .body(new MessageResponse(e.getMessage()));
          }
     }

//     @GetMapping("/receiver/{receiver}")
//     public ResponseEntity<?> getTransactionsByReceiver(@PathVariable String receiver, @CookieValue(value = "token") String token) {
//          try {
//
//               String username = jwtUtils.getUserNameFromJwtToken(token);
//
//               List<Transaction> transactions = transactionRepository.findAllByReceiver(receiver);
//
//               if(transactions == null)
//                    throw new Exception("Transactions not Found !!");
//
//               return ResponseEntity
//                       .ok(transactions);
//          } catch (Exception e) {
//               logger.error("Exception : " + e.getMessage());
//               return ResponseEntity
//                       .badRequest()
//                       .body(new MessageResponse(e.getMessage()));
//          }
//
//     }
}